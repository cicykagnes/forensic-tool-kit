# -*- coding: utf-8 -*-
"""frnsc data augmentation for sketch to image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nU_YMBUk7-IhdmeLhwSiyfJI16G3Ux6z
"""

from google.colab import drive
drive.mount('/content/gdrive')

import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec #GridSpec class is used to specify the geometry of the grid to place a subplot. For this, to work the number of rows and columns must be set.
import cv2
import os
import numpy as np
import glob
from PIL import Image

"""https://www.geeksforgeeks.org/python-opencv-affine-transformation/"""

def transform_image(img, skt, ang_range, shear_range, trans_range):
    '''
    Transforms images to generate new images.
    
    1- Image
    2- ang_range: Range of angles for rotation  , 40
    3- shear_range: Range of values to apply affine transform to  ,10
    4- trans_range: Range of values to apply translations over.  ,10

    A Random uniform distribution is used to generate different parameters for transformation

    '''
    # Rotation

    ang_rot = np.random.uniform(ang_range)-ang_range/2
    rows,cols,ch = img.shape    
    Rot_M = cv2.getRotationMatrix2D((cols/2,rows/2),ang_rot,1)

    # Translation
    tr_x = trans_range*np.random.uniform()-trans_range/2
    tr_y = trans_range*np.random.uniform()-trans_range/2
    Trans_M = np.float32([[1,0,tr_x],[0,1,tr_y]])

    # Shear
    pts1 = np.float32([[5,5],[20,5],[5,20]])

    pt1 = 5+shear_range*np.random.uniform()-shear_range/2
    pt2 = 20+shear_range*np.random.uniform()-shear_range/2

    pts2 = np.float32([[pt1,5],[pt2,pt1],[5,pt2]])

    shear_M = cv2.getAffineTransform(pts1,pts2)

    # Border
    idx = 0
    border_img = tuple([int(img[idx][0][0]), int(img[idx][0][1]), int(img[idx][0][2])])
    border_skt = tuple([int(skt[0][0][0]), int(skt[0][0][1]), int(skt[0][0][2])])
    
    img = cv2.warpAffine(img,Rot_M,(cols,rows), borderValue=border_img)
    img = cv2.warpAffine(img,Trans_M,(cols,rows), borderValue=border_img)
    img = cv2.warpAffine(img,shear_M,(cols,rows), borderValue=border_img)
    
    skt = cv2.warpAffine(skt,Rot_M,(cols,rows), borderValue=border_skt)
    skt = cv2.warpAffine(skt,Trans_M,(cols,rows), borderValue=border_skt)
    skt = cv2.warpAffine(skt,shear_M,(cols,rows), borderValue=border_skt)
    
    return img, skt

sketch_directory = '/content/gdrive/MyDrive/Dataset/'
photo_directory = '/content/gdrive/MyDrive/Dataset/'

if not os.path.exists(sketch_directory):
    os.mkdir(sketch_directory)

if not os.path.exists(photo_directory):
    os.mkdir(photo_directory)

aug_photo_filenames = glob.glob('/content/gdrive/MyDrive/Dataset/CUHK/Training photo/*')
aug_sketch_filenames = glob.glob('/content/gdrive/MyDrive/Dataset/CUHK/Training sketch/*')

counter = 0
for i in range(len(aug_photo_filenames)):
    im = cv2.imread(aug_photo_filenames[i])
    sk = cv2.imread(aug_sketch_filenames[i])

    for j in range(200):
        img, skt = transform_image(im, sk, 40, 10, 10)

        cv2.imwrite(photo_directory + str(counter) + '.jpg', img)
        cv2.imwrite(sketch_directory + str(counter) + '.jpg', skt)

        counter += 1

